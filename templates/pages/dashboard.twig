{% extends "base.twig" %}

{% block title %}Dashboard - TicketFlow{% endblock %}

{% block content %}
<div class="max-w-6xl mx-auto p-6">
    <!-- Header -->
    <div class="flex justify-between items-center mb-8">
        <h1 class="text-3xl font-bold">Welcome, {{ user.email }}</h1>
        <form method="POST" action="/logout">
            <button type="submit" class="bg-red-500 text-white px-4 py-2 rounded-xl">
                Logout
            </button>
        </form>
    </div>

    <!-- Stats -->
    <div class="grid md:grid-cols-4 gap-6 mb-10">
        <div class="bg-white p-6 rounded-xl shadow">
            <h2 class="text-gray-500">Total Tickets</h2>
            <p class="text-3xl font-bold">{{ stats.total }}</p>
        </div>
        <div class="bg-white p-6 rounded-xl shadow">
            <h2 class="text-gray-500">Open</h2>
            <p class="text-3xl font-bold text-green-500">{{ stats.open }}</p>
        </div>
        <div class="bg-white p-6 rounded-xl shadow">
            <h2 class="text-gray-500">In Progress</h2>
            <p class="text-3xl font-bold text-amber-500">{{ stats.in_progress }}</p>
        </div>
        <div class="bg-white p-6 rounded-xl shadow">
            <h2 class="text-gray-500">Closed</h2>
            <p class="text-3xl font-bold text-gray-500">{{ stats.closed }}</p>
        </div>
    </div>

    <!-- Chart -->
    <div class="bg-white rounded-xl shadow p-6 mb-10">
        <h2 class="text-xl font-semibold mb-4">Ticket Status Breakdown</h2>
        <canvas id="ticketChart" width="400" height="200"></canvas>
    </div>

    
</div>

<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script>
document.addEventListener('DOMContentLoaded', function() {
    const ctx = document.getElementById('ticketChart').getContext('2d');
    const chartData = {{ chartData|raw }};

    new Chart(ctx, {
        type: 'doughnut',
        data: chartData,
        options: {
            responsive: true,
            plugins: {
                legend: {
                    position: 'bottom',
                },
                tooltip: {
                    callbacks: {
                        label: function(context) {
                            const label = context.label || '';
                            const value = context.parsed;
                            const total = context.dataset.data.reduce((a, b) => a + b, 0);
                            const percentage = total > 0 ? Math.round((value / total) * 100) : 0;
                            return label + ': ' + value + ' (' + percentage + '%)';
                        }
                    }
                }
            }
        }
    });
});
</script>
{% endblock %}
